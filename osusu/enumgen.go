// Code generated by "core generate -sql"; DO NOT EDIT.

package osusu

import (
	"database/sql/driver"

	"cogentcore.org/core/enums"
)

var _SourcesValues = []Sources{0, 1, 2, 3}

// SourcesN is the highest valid value for type Sources, plus one.
const SourcesN Sources = 4

var _SourcesValueMap = map[string]Sources{`Cooking`: 0, `DineIn`: 1, `Takeout`: 2, `Delivery`: 3}

var _SourcesDescMap = map[Sources]string{0: ``, 1: ``, 2: ``, 3: ``}

var _SourcesMap = map[Sources]string{0: `Cooking`, 1: `DineIn`, 2: `Takeout`, 3: `Delivery`}

// String returns the string representation of this Sources value.
func (i Sources) String() string { return enums.BitFlagString(i, _SourcesValues) }

// BitIndexString returns the string representation of this Sources value
// if it is a bit index value (typically an enum constant), and
// not an actual bit flag value.
func (i Sources) BitIndexString() string { return enums.String(i, _SourcesMap) }

// SetString sets the Sources value from its string representation,
// and returns an error if the string is invalid.
func (i *Sources) SetString(s string) error { *i = 0; return i.SetStringOr(s) }

// SetStringOr sets the Sources value from its string representation
// while preserving any bit flags already set, and returns an
// error if the string is invalid.
func (i *Sources) SetStringOr(s string) error {
	return enums.SetStringOr(i, s, _SourcesValueMap, "Sources")
}

// Int64 returns the Sources value as an int64.
func (i Sources) Int64() int64 { return int64(i) }

// SetInt64 sets the Sources value from an int64.
func (i *Sources) SetInt64(in int64) { *i = Sources(in) }

// Desc returns the description of the Sources value.
func (i Sources) Desc() string { return enums.Desc(i, _SourcesDescMap) }

// SourcesValues returns all possible values for the type Sources.
func SourcesValues() []Sources { return _SourcesValues }

// Values returns all possible values for the type Sources.
func (i Sources) Values() []enums.Enum { return enums.Values(_SourcesValues) }

// HasFlag returns whether these bit flags have the given bit flag set.
func (i *Sources) HasFlag(f enums.BitFlag) bool { return enums.HasFlag((*int64)(i), f) }

// SetFlag sets the value of the given flags in these flags to the given value.
func (i *Sources) SetFlag(on bool, f ...enums.BitFlag) { enums.SetFlag((*int64)(i), on, f...) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Sources) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Sources) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Sources") }

// Value implements the [driver.Valuer] interface.
func (i Sources) Value() (driver.Value, error) { return i.String(), nil }

// Scan implements the [sql.Scanner] interface.
func (i *Sources) Scan(value any) error { return enums.Scan(i, value, "Sources") }

var _CategoriesValues = []Categories{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

// CategoriesN is the highest valid value for type Categories, plus one.
const CategoriesN Categories = 10

var _CategoriesValueMap = map[string]Categories{`Breakfast`: 0, `Brunch`: 1, `Lunch`: 2, `Dinner`: 3, `Dessert`: 4, `Snack`: 5, `Appetizer`: 6, `Side`: 7, `Drink`: 8, `Ingredient`: 9}

var _CategoriesDescMap = map[Categories]string{0: ``, 1: ``, 2: ``, 3: ``, 4: ``, 5: ``, 6: ``, 7: ``, 8: ``, 9: ``}

var _CategoriesMap = map[Categories]string{0: `Breakfast`, 1: `Brunch`, 2: `Lunch`, 3: `Dinner`, 4: `Dessert`, 5: `Snack`, 6: `Appetizer`, 7: `Side`, 8: `Drink`, 9: `Ingredient`}

// String returns the string representation of this Categories value.
func (i Categories) String() string { return enums.BitFlagString(i, _CategoriesValues) }

// BitIndexString returns the string representation of this Categories value
// if it is a bit index value (typically an enum constant), and
// not an actual bit flag value.
func (i Categories) BitIndexString() string { return enums.String(i, _CategoriesMap) }

// SetString sets the Categories value from its string representation,
// and returns an error if the string is invalid.
func (i *Categories) SetString(s string) error { *i = 0; return i.SetStringOr(s) }

// SetStringOr sets the Categories value from its string representation
// while preserving any bit flags already set, and returns an
// error if the string is invalid.
func (i *Categories) SetStringOr(s string) error {
	return enums.SetStringOr(i, s, _CategoriesValueMap, "Categories")
}

// Int64 returns the Categories value as an int64.
func (i Categories) Int64() int64 { return int64(i) }

// SetInt64 sets the Categories value from an int64.
func (i *Categories) SetInt64(in int64) { *i = Categories(in) }

// Desc returns the description of the Categories value.
func (i Categories) Desc() string { return enums.Desc(i, _CategoriesDescMap) }

// CategoriesValues returns all possible values for the type Categories.
func CategoriesValues() []Categories { return _CategoriesValues }

// Values returns all possible values for the type Categories.
func (i Categories) Values() []enums.Enum { return enums.Values(_CategoriesValues) }

// HasFlag returns whether these bit flags have the given bit flag set.
func (i *Categories) HasFlag(f enums.BitFlag) bool { return enums.HasFlag((*int64)(i), f) }

// SetFlag sets the value of the given flags in these flags to the given value.
func (i *Categories) SetFlag(on bool, f ...enums.BitFlag) { enums.SetFlag((*int64)(i), on, f...) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Categories) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Categories) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "Categories")
}

// Value implements the [driver.Valuer] interface.
func (i Categories) Value() (driver.Value, error) { return i.String(), nil }

// Scan implements the [sql.Scanner] interface.
func (i *Categories) Scan(value any) error { return enums.Scan(i, value, "Categories") }

var _CuisinesValues = []Cuisines{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}

// CuisinesN is the highest valid value for type Cuisines, plus one.
const CuisinesN Cuisines = 17

var _CuisinesValueMap = map[string]Cuisines{`African`: 0, `American`: 1, `Asian`: 2, `British`: 3, `Chinese`: 4, `European`: 5, `French`: 6, `Greek`: 7, `Indian`: 8, `Italian`: 9, `Japanese`: 10, `Jewish`: 11, `Korean`: 12, `LatinAmerican`: 13, `Mexican`: 14, `MiddleEastern`: 15, `Thai`: 16}

var _CuisinesDescMap = map[Cuisines]string{0: ``, 1: ``, 2: ``, 3: ``, 4: ``, 5: ``, 6: ``, 7: ``, 8: ``, 9: ``, 10: ``, 11: ``, 12: ``, 13: ``, 14: ``, 15: ``, 16: ``}

var _CuisinesMap = map[Cuisines]string{0: `African`, 1: `American`, 2: `Asian`, 3: `British`, 4: `Chinese`, 5: `European`, 6: `French`, 7: `Greek`, 8: `Indian`, 9: `Italian`, 10: `Japanese`, 11: `Jewish`, 12: `Korean`, 13: `LatinAmerican`, 14: `Mexican`, 15: `MiddleEastern`, 16: `Thai`}

// String returns the string representation of this Cuisines value.
func (i Cuisines) String() string { return enums.BitFlagString(i, _CuisinesValues) }

// BitIndexString returns the string representation of this Cuisines value
// if it is a bit index value (typically an enum constant), and
// not an actual bit flag value.
func (i Cuisines) BitIndexString() string { return enums.String(i, _CuisinesMap) }

// SetString sets the Cuisines value from its string representation,
// and returns an error if the string is invalid.
func (i *Cuisines) SetString(s string) error { *i = 0; return i.SetStringOr(s) }

// SetStringOr sets the Cuisines value from its string representation
// while preserving any bit flags already set, and returns an
// error if the string is invalid.
func (i *Cuisines) SetStringOr(s string) error {
	return enums.SetStringOr(i, s, _CuisinesValueMap, "Cuisines")
}

// Int64 returns the Cuisines value as an int64.
func (i Cuisines) Int64() int64 { return int64(i) }

// SetInt64 sets the Cuisines value from an int64.
func (i *Cuisines) SetInt64(in int64) { *i = Cuisines(in) }

// Desc returns the description of the Cuisines value.
func (i Cuisines) Desc() string { return enums.Desc(i, _CuisinesDescMap) }

// CuisinesValues returns all possible values for the type Cuisines.
func CuisinesValues() []Cuisines { return _CuisinesValues }

// Values returns all possible values for the type Cuisines.
func (i Cuisines) Values() []enums.Enum { return enums.Values(_CuisinesValues) }

// HasFlag returns whether these bit flags have the given bit flag set.
func (i *Cuisines) HasFlag(f enums.BitFlag) bool { return enums.HasFlag((*int64)(i), f) }

// SetFlag sets the value of the given flags in these flags to the given value.
func (i *Cuisines) SetFlag(on bool, f ...enums.BitFlag) { enums.SetFlag((*int64)(i), on, f...) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Cuisines) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Cuisines) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Cuisines") }

// Value implements the [driver.Valuer] interface.
func (i Cuisines) Value() (driver.Value, error) { return i.String(), nil }

// Scan implements the [sql.Scanner] interface.
func (i *Cuisines) Scan(value any) error { return enums.Scan(i, value, "Cuisines") }
